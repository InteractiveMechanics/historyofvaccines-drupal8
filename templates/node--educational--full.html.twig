{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

<div class="activity-node">
	<div class="activity">
		<div class="row">
			<div class="col-md-12">
			
				<div id="node-1182" class="node node-type-swf">
				    {% if content.field_swf_reference[0]['#node'].field_use_animate_js[0].value|raw %}
						<script src="https://code.createjs.com/createjs-2015.11.26.min.js"></script>

                        {{content.field_swf_reference[0]['#node'].field_swiffy[0].value|raw}}
						
						<script>
                            var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
                            function init() {
                            	canvas = document.getElementById("swiffycontainer");
                            	anim_container = document.getElementById("swiffy-wrapper");
                            	dom_overlay_container = document.getElementById("dom_overlay_container");
                            	handleComplete();
                            }
                            function handleComplete() {
                            	//This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
                            	exportRoot = new lib.newimmunizationschedule();
                            	stage = new createjs.Stage(canvas);
                            	stage.addChild(exportRoot);
                            	stage.enableMouseOver();	
                            	//Registers the "tick" event listener.
                            	fnStartAnimation = function() {
                            		createjs.Ticker.setFPS(lib.properties.fps);
                            		createjs.Ticker.addEventListener("tick", stage);
                            	}	    
                            	//Code to support hidpi screens and responsive scaling.
                            	function makeResponsive(isResp, respDim, isScale, scaleType) {		
                            		var lastW, lastH, lastS=1;		
                            		window.addEventListener('resize', resizeCanvas);		
                            		resizeCanvas();		
                            		function resizeCanvas() {			
                            			var w = lib.properties.width, h = lib.properties.height;			
                            			var iw = window.innerWidth, ih=window.innerHeight;			
                            			var pRatio = window.devicePixelRatio || 1, xRatio=iw/w, yRatio=ih/h, sRatio=1;			
                            			if(isResp) {                
                            				if((respDim=='width'&&lastW==iw) || (respDim=='height'&&lastH==ih)) {                    
                            					sRatio = lastS;                
                            				}				
                            				else if(!isScale) {					
                            					if(iw<w || ih<h)						
                            						sRatio = Math.min(xRatio, yRatio);				
                            				}				
                            				else if(scaleType==1) {					
                            					sRatio = Math.min(xRatio, yRatio);				
                            				}				
                            				else if(scaleType==2) {					
                            					sRatio = Math.max(xRatio, yRatio);				
                            				}			
                            			}			
                            			canvas.width = w*pRatio*sRatio;			
                            			canvas.height = h*pRatio*sRatio;
                            			canvas.style.width = dom_overlay_container.style.width = anim_container.style.width =  w*sRatio+'px';				
                            			canvas.style.height = anim_container.style.height = dom_overlay_container.style.height = h*sRatio+'px';
                            			stage.scaleX = pRatio*sRatio;			
                            			stage.scaleY = pRatio*sRatio;			
                            			lastW = iw; lastH = ih; lastS = sRatio;		
                            		}
                            	}
                            	makeResponsive(true,'width',true,1);	
                            	fnStartAnimation();
                            }
                        </script>    
						

						<div id="swiffy-wrapper" style="max-width:90%; max-height:596px;">
                    		<canvas id="swiffycontainer"></canvas>
                    		<div id="dom_overlay_container" style="pointer-events:none; overflow:hidden; position: absolute; left: 0px; top: 0px; display: block;">
                    		</div>
                    	</div>

                    {% else %}

                        <script src="//www.gstatic.com/swiffy/v7.1/runtime.js"></script>
						
						<div id="swiffy-wrapper">
							<div id="swiffycontainer"></div>
						</div>    
						
						{{content.field_swf_reference[0]['#node'].field_swiffy[0].value|raw}}
						
						<script>
							var stage = new swiffy.Stage(document.getElementById("swiffycontainer"), swiffyobject, {  }); 
							stage.start();
						</script>

                    {% endif %}
					
					</div>
				</div>
				

			</div>
		</div>
	</div>

	<div class="row">
		<div class="col-md-9">
			<div class="related-activities">
				<ul>
					{{all_simulations}}
				</ul>
			</div>
		</div>
		
		<div class="col-md-3">
			
			<div class="sidebar">
			
				{% if content.field_rel_blog_posts[0] %}
					<div class="sidebar-item">
						<h5>Related Blog Posts</h5>
						
						<ul>
							{% for key, activities in content.field_rel_blog_posts if key|first != '#' %}
								<li>
									<div class="sidebar-blurb">
										<p class="title">
											<a href="javascript:void(0);">{{ activities['#node'].title.value }}</a>
										</p>
					
										<p>
											<!--<img style="float:left; margin-right:15px; margin-bottom:5px;" 
											src="http://www.historyofvaccines.org/sites/default/files/000herd_65_0.jpg">-->
											{{ activities['#node'].field_synopsis.value|raw   }}
											<br style="clear:both;" />
										</p>
									</div>
								</li>
							{% endfor %}
						</ul>
					</div>
				{% endif %}	
				
				
				{% if content.field_rel_items[0] %}
					<div class="sidebar-item">
						<h5>Featured Links</h5>
						
						<ul>
							{% for key, activities in content.field_rel_items if key|first != '#' %}
								<li>
									<div class="sidebar-blurb">
										<p class="title">
											<a href="{{ path('entity.node.canonical', {'node': activities['#node'].id}) }}">{{ activities['#node'].title.value }}</a>
										</p>
									</div>
								</li>
							{% endfor %}
						</ul>
					</div>
				{% endif %}	
				
				
				{% if content.field_rel_articles[0] %}
					<div class="sidebar-item">
						<h5>Related Articles</h5>
						
						<ul>
							{% for key, activities in content.field_rel_articles if key|first != '#' %}
								<li>
									<div class="sidebar-blurb">
										<p class="title">
											<a href="{{ path('entity.node.canonical', {'node': activities['#node'].id}) }}">{{ activities['#node'].title.value }}</a>
										</p>
					
										<p>
											<!--<img style="float:left; margin-right:15px; margin-bottom:5px;" 
											src="http://www.historyofvaccines.org/sites/default/files/000herd_65_0.jpg">-->
											{{ activities['#node'].field_synopsis.value|raw   }}
											<br style="clear:both;" />
										</p>
									</div>
								</li>
							{% endfor %}
						</ul>
					</div>
				{% endif %}	
				
				
				{% if content.field_rel_quiz_question[0] %}
					<div class="sidebar-item quiz-item">
						
						<div class="header">
							<h4>What do you think?</h4>
						</div>
						
						<div class="questions">
							<p>
								{{ content.field_rel_quiz_question[0]['#node'].field_question[0].value }}
							</p>
						</div>
						
						<div class="choices" data-answer="{{content.field_rel_quiz_question[0]['#node'].field_answer.value}}">
							<ul>
								{% for answer in content.field_rel_quiz_question[0]['#node'].field_choice %}
								
									<li>
										{{ answer.value }} 
									</li>
									
								{% endfor %}
							</ul>
						</div>
						
						<div class="more-info">
						
							<span class="answer">Correct</span>
							{{ content.field_rel_quiz_question[0]['#node'].body[0].value|raw }}
						</div>
						
						
					</div>
			
				{% endif %}
			</div>
			
			
			
		</div>
		
	</div>
</div>

<script type="text/javascript">

	$(document).ready(function(){
        init();

		$('.choices ul li').click(function(){
			if(!$(this).parent().parent().hasClass('answered')) {
			
				var answer = $(this).parent().parent().data('answer');
				var n = $(this).index();
				
				var chr = String.fromCharCode(97 + n);
				
				if(chr == answer) {
					$('span.answer').text('Correct');
				} else {
					$('span.answer').text('Incorrect');
				}
				$(this).parent().parent().addClass('answered');
				
				$('.more-info').show();
			}
			
		});
		
		if( document.body.offsetWidth < 768 ) {
			document.getElementById('MobileActivityLink').click();
		}
	});

</script>
