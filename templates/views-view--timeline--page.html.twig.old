{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
		
<div class="timeline-content hidden">
	{% for row in rows %}
	<div class="timeline-content">{{row}}</div>
{% endfor %}
</div>
{% verbatim %}
<script id="item-template" type="text/x-handlebars-template">
			<div class="year">
				{{year}}
			</div>
			<div class="timeline-entry" data-year="{{year}}" data-title="{{title}}" data-body='{{description}}' 
				data-filename="{{#each filename}}{{this}}|,|{{/each}}" data-toggle="modal" data-target="#myModal">
					{{#if filename.[0]}}
						<div class="image">
							<img src="http://media.historyofvaccines.org/images/{{filename.[0]}}_90.jpg" alt="{{title}}" />
						</div>
					{{/if}}
				
				<div class="title">
					{{title}}
				</div>
				
				<br style="clear:both" />
			</div>
			
</script>
{% endverbatim %}
<div id="visualization"></div>


<script type="text/javascript">
		
		
		var titleArray = [];
		
		$( '.timeline-title' ).each(function() {
		 titleArray.push($(this).text().trim());
		});
		
		var bodyArray = [];
		
		$( '.timeline-body' ).each(function() {
		 bodyArray.push($(this).html().trim());
		});
		
		var idArray = [];
		
		$( '.timeline-id' ).each(function() {
		 idArray.push($(this).text().trim());
		});
		
		//console.log(bodyArray);

		var dateArray = [];
		$( '.timeline-date' ).each(function() {
		    var dateStr = $(this).text().trim();
		
		    if(dateStr.indexOf('/') > -1) {
		        var year = dateStr.split('/')[2];
		        dateArray.push(year);
		    } else if(dateStr.indexOf(',') > -1){
		        var year = dateStr.split(',')[1];
		        dateArray.push(year.trim());
		    } else {
		        dateArray.push(dateStr);
		    }
		});	
		
		
		
		var categoryArray = [];

		$( '.timeline-category' ).each(function() {
		 categoryArray.push($(this).text().trim());
		});
		
		var fileNameArray = [];
		$( '.timeline-files' ).each(function() {
			var fileName = $(this).text().trim();
			
			if(fileName == "") {
				fileNameArray.push(fileName);
			} else {
				
				if(fileName.length == 2) {
					fileName = "0000" + fileName;
				} else if(fileName.length > 2 && fileName.length < 4) {
					fileName = "000" + fileName;
				} else {
					fileName = fileName;
				}
				
				fileNameArray.push(fileName);
				
			}
		});
		
		
		var timelineData = [];
		
		var append = 0;
		var append_to = 0;

		for(i = 0; i < titleArray.length; i++) 
		{
			append = 0;
			for(x = 0; x < timelineData.length; x++) 
			{
				if(timelineData[x].title == titleArray[i] && timelineData[x].year == dateArray[i])
				{
					append = 1;
					append_to = x;
				}
			}

			if(append == 1)
			{
				append = 0;
				timelineData[append_to].filename.push(fileNameArray[i]);
			}
			else
			{
				timelineData.push(
					{
						year: dateArray[i],
						title: titleArray[i],
						filename: [fileNameArray[i]],
						category: categoryArray[i],
						description: bodyArray[i],
						start: dateArray[i]
					}
				);
			}
		}
		
		//test
		var source   = $("#item-template").html();
		var template = Handlebars.compile(source);
		var html    = template(timelineData[0]);
		
				
		// create a handlebars template
		//var source   = document.getElementById('item-template').innerHTML;
		//var template = Handlebars.compile(document.getElementById('item-template').innerHTML);
		
		
		// DOM element where the Timeline will be attached
		var container = document.getElementById('visualization');
		
		// Create a DataSet (allows two way data-binding)
		var items = new vis.DataSet(timelineData);
		
		// Configuration for the Timeline
		var options = {
			template: template,
			autoResize: true,
			height: '600px',
            showMinorLabels: true,
            min: '800',
            max: '2050',
            start: '1200',
            zoomMax: (788923150000),
            zoomMin: (788923150000),
            timeAxis: {scale: 'year', step: 25}
		};
		
		// Create a Timeline
		var timeline = new vis.Timeline(container, items, options);
		
		$(document).ready(function(){
			var eventLocationID = window.location.hash.substring(1);
			
			if(eventLocationID) {
				eventLocationID = eventLocationID.replace("EVT_", "");
				timeline.setSelection(eventLocationID, {focus: true});	
			}
		});
</script>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog timeline-dialog" role="document">
    <div class="modal-content">
    
      <div class="modal-body">
      	
      	<div class="row">
	        <div class="col-md-5 timeline-modal-left">
	        	<div class="timeline-modal-image text-center">
	        	</div>
			</div>
        
			<div class="col-md-7 timeline-modal-right">
				<p class="timeline-modal-date"></p>
				<p class="timeline-modal-title"></p>
				<p class="timeline-modal-body"></p>
			</div>
      </div>
     
      <!--<div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>-->
    </div>
  </div>
</div>
