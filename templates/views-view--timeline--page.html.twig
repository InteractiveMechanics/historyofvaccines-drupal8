
{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
		
{% verbatim %}
<script id="item-template" type="text/x-handlebars-template">
    {{#group this by="segment"}}
        <div class="vis-segment">
            <div class="vis-segment-year">{{value}}</div>

            <div class="vis-segment-item-wrapper">
                {{#each items}}
                    <div class="vis-segment-item">
                        <div class="year">{{year}}</div>
                        <div class="timeline-entry" data-caption="{{#each caption}}{{this}}|,|{{/each}}" data-copyright="{{#each copyright}}{{this}}|,|{{/each}}" data-creator="{{#each creator}}{{this}}|,|{{/each}}" id="{{id}}" data-datestr="{{datestr}}" data-nid="{{nid}}" data-year="{{year}}" data-uniqueid="{{id}}" data-title="{{title}}" data-body='{{description}}' data-filename="{{#each filename}}{{this}}|,|{{/each}}" data-filetype="{{#each filetype}}{{this}}|,|{{/each}}" data-toggle="modal" data-target="#myModal">
                				{{#isVideo filename.[0]}}{{/isVideo}}
                				
                			<div class="title">{{title}}</div>
                			<br style="clear:both" />
                        </div>
                    </div>
                {{/each}}
            </div>
        </div>
    {{/group}}
</script>
{% endverbatim %}

<div id="visualization">
    <div class="vis-wrapper">
        <div id="visualization-container" class="vis-timeline"></div>
    </div>
    <div id="visualization-filters"><span class="expand">FILTER</span>{{ exposed_form_timeline }}</div>
    <div id="visualization-timeline" class="">
        <a class="moveleft btn btn-default">&#9664;</a>
        <a class="moveright btn btn-default pull-right">&#9654;</a>
        <div class="slider"></div>
    </div>
</div>

<div class="main-content">
	<div class="row">
		<div class="col-md-8 timeline-overview">
			
			<h2>{{timeline_overview_title}}</h2>
			
			<p class="timeline-overview">
				{{timeline_overview_body|raw}}
			</p>
			
		</div>
		
		<div class="col-md-4">
			<div class="sidebar">
				<div class="sidebar-item">
					<h5>HIGHLIGHTS</h5>
				
					<ul>
						{% for key, highlight in timeline_overview_highlight if key|first != '#' %}
							
							<li>
								<div class="sidebar-blurb">

									<p class="title" style="color: #369; font-size: 13px; font-weight: bold;">
										<a href="javascript: void(0);" onclick="showTimelineItem({{highlight.field_related_timeline_entries.entity.field_uid.value}})">{{highlight.title.value}}</a>
									</p>
									
									
									<p>
										{% if highlight.field_related_media[0].entity.field_orig_filename.value ends with "m4v" %}
				                            {% set orig_filename = highlight.field_related_media[0].entity.field_orig_filename.value|split('.')[0] %}
				                        {% else %}
				                            {% set orig_filename = highlight.field_related_media[0].entity.field_orig_filename.value %}
				                        {% endif %}
				                    
				                        {% if orig_filename|length == 1 %}
				                    		{% set orig_filename = '00000' ~ orig_filename %}
				                    
				                        {% elseif orig_filename|length == 2 %}
				                            {% set orig_filename = '0000' ~ orig_filename %}
				                    
				                        {% elseif orig_filename|length == 3 %}
				                            {% set orig_filename = '000' ~ orig_filename %}
				                    
				                        {% elseif orig_filename|length == 4 %}
				                            {% set orig_filename = '00' ~ orig_filename %}
				                    
				                        {% elseif orig_filename|length == 5 %}
				                            {% set orig_filename = '0' ~ orig_filename %}
				                    	{% endif %}
				                    	
										<img style="float:left; margin-right:15px; margin-bottom:5px;" 
										src="https://media.historyofvaccines.org/images/{{ orig_filename }}_265.jpg" width="70">
										{{highlight.body.value|raw}}
									</p>
									
									<br style="clear:both;" />
								</div>
							</li>
						{% endfor %}					
					</ul>
				</div>
			</div>
		</div>	
	</div>

</div>

<script type="text/javascript">
        var isStaging = true;

        var allCheckbox = $('#views-exposed-form-timeline-page-1 .form-select:eq(0)');
        $('#views-exposed-form-timeline-page-1 .form-select:eq(0)').parent().html(allCheckbox).append('<b>All</b>');
        
        $('#visualization-filters .expand').on('click tap', function () {
            $(this).toggleClass('active').parent().find('form').toggleClass('in');
        });
        
        $('#views-exposed-form-timeline-page-1 .form-select').on('change', function(){
			var val = $(this).val();
            var ind = $('#views-exposed-form-timeline-page-1 .form-select').index($(this));

			if(val == 'All' && $(this).is(':checked')) {
				$('#views-exposed-form-timeline-page-1 .form-select').prop('checked', false);
				$('#views-exposed-form-timeline-page-1 .form-select:eq(0)').prop('checked', true);
			} else {
				//console.log($('#views-exposed-form-timeline-page-1 .form-select:eq(0)'));
                $('#views-exposed-form-timeline-page-1 .form-select:eq(0)').prop('checked', false);
			}
			
			filterTimeline();
		});
		
		function filterTimeline() {
            if(isStaging){
			    var path = "http://staging.historyofvaccines.org/timeline";
            } else {
                var path = "https://www.historyofvaccines.org/timeline";
            }
			var filters = document.getElementsByName('timeline_categories');
			
			if(filters[0].checked) {
				window.location = path;
			}
			
			var filterQuery = '';
			for(var i = 1; i < filters.length; i++) {
				if(filters[i].checked) {
					filterQuery += 'timeline_categories[]=' + filters[i].value + '&';
				}	
			} 
			
			if(filterQuery) {
				filterQuery = filterQuery.replace(/&+$/, "");
				var url = path + "?" + filterQuery;
				window.location = url;
			} else {
				window.location = path;
			}
			
		}

        function getQueryVariable(variable){
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i=0;i<vars.length;i++) {
               var pair = vars[i].split("=");
               if(pair[0] == variable){return pair[1];}
            }
            return(false);
        }

        Handlebars.registerHelper('compare', function (lvalue, operator, rvalue, options) {
            var operators, result;

            if (arguments.length < 3) {
                throw new Error("Handlerbars Helper 'compare' needs 2 parameters");
            }
        
            if (options === undefined) {
                options = rvalue;
                rvalue = operator;
                operator = "===";
            }
        
            operators = {
                '==': function (l, r) { return l == r; },
                '===': function (l, r) { return l === r; },
                '!=': function (l, r) { return l != r; },
                '!==': function (l, r) { return l !== r; },
                '<': function (l, r) { return l < r; },
                '>': function (l, r) { return l > r; },
                '<=': function (l, r) { return l <= r; },
                '>=': function (l, r) { return l >= r; },
                'typeof': function (l, r) { return typeof l == r; }
            };
        
            if (!operators[operator]) {
                throw new Error("Handlerbars Helper 'compare' doesn't know the operator " + operator);
            }
        
            result = operators[operator](lvalue, rvalue);
        
            if (result) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        
        });

        function get(obj, prop) {
        	var parts = prop.split('.'),
        		last = parts.pop();
        
        	while ((prop = parts.shift())) {
        		obj = obj[prop];
        
        		if (obj == null) {
        			return;
        		}
        	}
        
        	return obj[last];
        }
        
        function noop() {
        	return '';
        }

        Handlebars.registerHelper('group', function(list, options){
            options = options || {};

			var fn = options.fn || noop,
				inverse = options.inverse || noop,
				hash = options.hash,
				prop = hash && hash.by,
				keys = [],
				groups = {};

			if (!prop || !list || !list.length) {
				return inverse(this);
			}

			function groupKey(item) {
				var key = get(item, prop);

				if (keys.indexOf(key) === -1) {
					keys.push(key);
				}

				if (!groups[key]) {
					groups[key] = {
						value: key,
						items: []
					};
				}

				groups[key].items.push(item);
			}

			function renderGroup(buffer, key) {
				return buffer + fn(groups[key]);
			}

			list.forEach(groupKey);

			return keys.reduce(renderGroup, '');
        });

		Handlebars.registerHelper('isVideo', function(filename) {
            if (filename) {
    			var imgURL = "https://media.historyofvaccines.org/images/"+ filename + "_90.jpg"
    			if ( filename.indexOf('m4v') == -1 && filename != "") {
    				return "<div class='image'>" +
    							"<img src='"+ imgURL +"' />" +
    						"</div>"
    			} else {
    				return ""
    			}
			}
		});

        var timelineData = [];
        var data = [];
        var timelineCount;
        var slider;
        var query = getQueryVariable('timeline_categories[]');
        var timeline;
        
        if (query) {
            var ids = query;
        } else {
            var ids = 'all';
        }
        
        if(ids == 'All') {
	        ids = 'all';
        }
        
        function round(number, increment, offset) {
            return Math.floor((number - offset) / increment ) * increment + offset;
        }

        var pathArray = window.location.pathname.split( '/' );
        if (pathArray[1] == 'es'){
            if(isStaging) {
                var url = 'http://staging.historyofvaccines.org/timeline.php?category_ids='+ ids + '&is_espanol=1';
            } else {
                var url = 'https://www.historyofvaccines.org/timeline.php?category_ids='+ ids + '&is_espanol=1';
            }
        } else {
            if(isStaging) {
                var url = 'http://staging.historyofvaccines.org/timeline.php?category_ids='+ ids + '&is_espanol=0';
            } else {
                var url = 'https://www.historyofvaccines.org/timeline.php?category_ids='+ ids + '&is_espanol=0';
            }
        }

        $.ajax({
            url: url,
            success: function(d) {
	            d = JSON.parse(d);
                var append = 0;
                var append_to = 0;
                for(i = 0; i < d.length; i++) {
        			append = 0;
        			for(x = 0; x < timelineData.length; x++) {
        				if(timelineData[x].title == d[i].title){
        					append = 1;
        					append_to = x;
        				}
        			}
        
        			if(append == 1) {
        				append = 0;
        				timelineData[append_to].filename.push(d[i].filename);
                        timelineData[append_to].filetype.push(d[i].filetype);
                        timelineData[append_to].creator.push(d[i].field_creator);
                        timelineData[append_to].caption.push(d[i].field_caption);
                        timelineData[append_to].copyright.push(d[i].field_copyright);
        			} else {
                        if (d[i].year) {
	                        
	                        var dateStr = d[i].year;
	                        var year = '';
	                        if(dateStr.indexOf('/') == -1) {
                                if (dateStr.indexOf(',') == -1) {
                                    year = dateStr;
                                } else {
                                    year = dateStr.substr(dateStr.indexOf(",") + 1);
                                }
	                        } else {
		                        year = dateStr.split('/')[2];
	                        }
	                        
            				timelineData.push(
            					{
            						id: d[i].id,
            						year: year,
            						title: d[i].title,
            						filename: [d[i].filename],
                                    filetype: [d[i].filetype],
                                    filetitle: [d[i].filetitle],
                                    filebody: [d[i].filebody],
                                    creator: [d[i].field_creator],
                                    caption: [d[i].field_caption],
                                    copyright: [d[i].field_copyright],
            						category: d[i].category,
            						description: d[i].description,
            						datestr: d[i].year,
            						start: d[i].year,
                                    nid: d[i].nid,
                                    segment: round(year, 50, 50)
            					}
            				);
                        }
        			}
        		}
        		
        		var sort_by = function(field, reverse, primer){
				   var key = primer ? 
				       function(x) {return primer(x[field])} : 
				       function(x) {return x[field]};
				
				   reverse = !reverse ? 1 : -1;
				
				   return function (a, b) {
				       return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
				     } 
				}
				
				timelineData.sort(sort_by('year', false, parseInt));


                // Create an array of all media items
                // And create timeline segments
                $.each(timelineData, function(i){
                    for (i = 0; i < this.filename.length; i++){
                        data[this.filename[i]] = {
                            root: this.filename[i],
                            title: this.filetitle[i],
                            description: this.filebody[i],
                            caption: this.caption[i],
                            creator: this.creator[i]
                        };
                    }
                });

        		var source   = $("#item-template").html();
        		var template = Handlebars.compile(source);
        		var html     = template(timelineData);
        		
        		
        		// DOM element where the Timeline will be attached
        		var container = document.getElementById('visualization-container');
        		
        		
        		// Create a Timeline
                timelineCount = timelineData.length;
                container.innerHTML = html;


                function getTimelineWidth() {
                    var width = 0;
                    $('.vis-segment').each(function( index ){
                        width += $(this).width();
                    });

                    return width;
                }
                var timelineWidth = getTimelineWidth();
                var screenWidth = $('#visualization-container').width();


        		// Timeout before moving the timeline to the hashed event
        		setTimeout(function(){
	        		var eventLocationID = window.location.hash.substring(1);
        			
        			if(eventLocationID) {
        				eventLocationID = eventLocationID.replace("EVT_", "");
        				
        				$("#" + eventLocationID).click();
                        
                        var x = $("#" + eventLocationID).offset().left - (screenWidth/2);
                        $('#visualization-container').animate({scrollLeft: x}, 1000);
                        slider.slider( "option", "value", x );

        			} else {
                        eventLocationID = timelineData[0].id;
                    }
	        	}, 300);
	        	

                // Controls the slider at the bottom
                slider = $('#visualization-timeline .slider').slider({
	                min: 0,
				    max: timelineWidth,
				    value: 0,
				    slide: function( event, ui ) {
				    	var x = ui.value;
                        $('#visualization-container').scrollLeft(x);
				    }
                });
	        	
                // Controls the arrows at the bottom slider
                $('.moveleft').on('click', function(){
                    var x = $('#visualization-container').scrollLeft() - screenWidth;
                    if (x < 0){ x == 0; }
                    
                    $('#visualization-container').animate({scrollLeft: x}, 500);
                });
        		$('.moveright').on('click', function(){
                    var x = $('#visualization-container').scrollLeft() + screenWidth;
                    if (x > timelineWidth){ x == timelineWidth; }
                    
                    $('#visualization-container').animate({scrollLeft: x}, 500);
                });
                $('#visualization-container').on('scroll', function(){
                    var x = $('#visualization-container').scrollLeft();
                    slider.slider( "option", "value", x );
                });
            },
            error: function (err) {
                console.log('Failed to load timeline data');
            }
        });
        
        function showTimelineItem(eventLocationID) {
			$("#" + eventLocationID).click();
        }
</script>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog timeline-dialog" role="document">
        <div class="modal-content">
    
            <div class="modal-body">
      	
              	<div style="cursor:pointer;" class="pull-right" data-dismiss="modal">
              		<span class="glyphicon glyphicon-remove" style="z-index:10;"></span>
              	</div>
      	
                <div class="row">
                    <div class="col-md-5 timeline-modal-left">
                        <div class="timeline-modal-image text-center"></div>
                    </div>
        
        			<div class="col-md-7 timeline-modal-right">
                        {% if is_admin %}
                            <a href="" class="btn timeline-modal-edit-button">Edit</a>
                        {% endif %}
        				<p class="timeline-modal-date"></p>
        				<p class="timeline-modal-title"></p>
        				<p class="timeline-modal-body"></p>
        			</div>
                </div>
            </div>
        </div>
    </div>
</div>
